{"version":3,"file":"index.mjs","sources":["../lib/ctor.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nvar defineProperty = require( '@stdlib/utils-define-property' );\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils-define-nonenumerable-read-only-accessor' );\nvar isProbability = require( '@stdlib/assert-is-probability' ).isPrimitive;\nvar entropy = require( '@stdlib/stats-base-dists-bernoulli-entropy' );\nvar kurtosis = require( '@stdlib/stats-base-dists-bernoulli-kurtosis' );\nvar mean = require( '@stdlib/stats-base-dists-bernoulli-mean' );\nvar mode = require( '@stdlib/stats-base-dists-bernoulli-mode' );\nvar median = require( '@stdlib/stats-base-dists-bernoulli-median' );\nvar skewness = require( '@stdlib/stats-base-dists-bernoulli-skewness' );\nvar stdev = require( '@stdlib/stats-base-dists-bernoulli-stdev' );\nvar variance = require( '@stdlib/stats-base-dists-bernoulli-variance' );\nvar cdf = require( '@stdlib/stats-base-dists-bernoulli-cdf' );\nvar mgf = require( '@stdlib/stats-base-dists-bernoulli-mgf' );\nvar pmf = require( '@stdlib/stats-base-dists-bernoulli-pmf' );\nvar quantile = require( '@stdlib/stats-base-dists-bernoulli-quantile' );\nvar format = require( '@stdlib/string-format' );\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n*/\nfunction bernoulliCDF( x ) {\n\treturn cdf( x, this.p );\n}\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @private\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n*/\nfunction bernoulliMGF( t ) {\n\treturn mgf( t, this.p );\n}\n\n/**\n* Evaluates the probability mass function (PMF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated PMF\n*/\nfunction bernoulliPMF( x ) {\n\treturn pmf( x, this.p );\n}\n\n/**\n* Evaluates the quantile function.\n*\n* @private\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n*/\nfunction bernoulliQuantile( p ) {\n\treturn quantile( p, this.p );\n}\n\n\n// MAIN //\n\n/**\n* Bernoulli distribution constructor.\n*\n* @constructor\n* @param {Probability} [p=0.5] - success probability\n* @throws {TypeError} `p` must be a probability\n* @returns {Bernoulli} distribution instance\n*\n* @example\n* var bernoulli = new Bernoulli();\n*\n* var y = bernoulli.cdf( 1.8 );\n* // returns 1.0\n*\n* var v = bernoulli.median;\n* // returns 0.0\n*/\nfunction Bernoulli() {\n\tvar p;\n\tif ( !(this instanceof Bernoulli) ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn new Bernoulli();\n\t\t}\n\t\treturn new Bernoulli( arguments[ 0 ] );\n\t}\n\tif ( arguments.length ) {\n\t\tp = arguments[ 0 ];\n\t\tif ( !isProbability( p ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Mean parameter `p` must be a probability. Value: `%s`.', p ) );\n\t\t}\n\t} else {\n\t\tp = 0.5;\n\t}\n\tdefineProperty( this, 'p', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn p;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isProbability( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid value. Must be a probability. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\tp = value;\n\t\t}\n\t});\n\treturn this;\n}\n\n/**\n* Bernoulli distribution differential entropy.\n*\n* @name entropy\n* @memberof Bernoulli.prototype\n* @type {number}\n* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}\n*\n* @example\n* var bernoulli = new Bernoulli( 0.4 );\n*\n* var v = bernoulli.entropy;\n* // returns ~0.673\n*/\nsetReadOnlyAccessor( Bernoulli.prototype, 'entropy', function get() {\n\treturn entropy( this.p );\n});\n\n/**\n* Bernoulli distribution excess kurtosis.\n*\n* @name kurtosis\n* @memberof Bernoulli.prototype\n* @type {number}\n* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}\n*\n* @example\n* var bernoulli = new Bernoulli( 0.4 );\n*\n* var v = bernoulli.kurtosis;\n* // returns ~-1.833\n*/\nsetReadOnlyAccessor( Bernoulli.prototype, 'kurtosis', function get() {\n\treturn kurtosis( this.p );\n});\n\n/**\n* Bernoulli distribution expected value.\n*\n* @name mean\n* @memberof Bernoulli.prototype\n* @type {number}\n* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}\n*\n* @example\n* var bernoulli = new Bernoulli( 0.4 );\n*\n* var v = bernoulli.mean;\n* // returns 0.4\n*/\nsetReadOnlyAccessor( Bernoulli.prototype, 'mean', function get() {\n\treturn mean( this.p );\n});\n\n/**\n* Bernoulli distribution median.\n*\n* @name median\n* @memberof Bernoulli.prototype\n* @type {number}\n* @see [median]{@link https://en.wikipedia.org/wiki/Median}\n*\n* @example\n* var bernoulli = new Bernoulli( 0.4 );\n*\n* var v = bernoulli.median;\n* // returns 0.0\n*/\nsetReadOnlyAccessor( Bernoulli.prototype, 'median', function get() {\n\treturn median( this.p );\n});\n\n/**\n* Bernoulli distribution mode.\n*\n* @name mode\n* @memberof Bernoulli.prototype\n* @type {number}\n* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}\n*\n* @example\n* var bernoulli = new Bernoulli( 0.4 );\n*\n* var v = bernoulli.mode;\n* // returns 0.0\n*/\nsetReadOnlyAccessor( Bernoulli.prototype, 'mode', function get() {\n\treturn mode( this.p );\n});\n\n/**\n* Bernoulli distribution skewness.\n*\n* @name skewness\n* @memberof Bernoulli.prototype\n* @type {number}\n* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}\n*\n* @example\n* var bernoulli = new Bernoulli( 0.4 );\n*\n* var v = bernoulli.skewness;\n* // returns ~0.408\n*/\nsetReadOnlyAccessor( Bernoulli.prototype, 'skewness', function get() {\n\treturn skewness( this.p );\n});\n\n/**\n* Bernoulli distribution standard deviation.\n*\n* @name stdev\n* @memberof Bernoulli.prototype\n* @type {PositiveNumber}\n* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}\n*\n* @example\n* var bernoulli = new Bernoulli( 0.4 );\n*\n* var v = bernoulli.stdev;\n* // returns ~0.49\n*/\nsetReadOnlyAccessor( Bernoulli.prototype, 'stdev', function get() {\n\treturn stdev( this.p );\n});\n\n/**\n* Bernoulli distribution variance.\n*\n* @name variance\n* @memberof Bernoulli.prototype\n* @type {PositiveNumber}\n* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}\n*\n* @example\n* var bernoulli = new Bernoulli( 0.4 );\n*\n* var v = bernoulli.variance;\n* // returns 0.24\n*/\nsetReadOnlyAccessor( Bernoulli.prototype, 'variance', function get() {\n\treturn variance( this.p );\n});\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @name cdf\n* @memberof Bernoulli.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var bernoulli = new Bernoulli( 0.2 );\n*\n* var v = bernoulli.cdf( 1.5 );\n* // returns 1.0\n*/\nsetReadOnly( Bernoulli.prototype, 'cdf', bernoulliCDF );\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @name mgf\n* @memberof Bernoulli.prototype\n* @type {Function}\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}\n*\n* @example\n* var bernoulli = new Bernoulli( 0.2 );\n*\n* var v = bernoulli.mgf( -3.0 );\n* // returns ~0.81\n*/\nsetReadOnly( Bernoulli.prototype, 'mgf', bernoulliMGF );\n\n/**\n* Evaluates the probability mass function (PMF).\n*\n* @name pmf\n* @memberof Bernoulli.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated PMF\n* @see [pmf]{@link https://en.wikipedia.org/wiki/Probability_mass_function}\n*\n* @example\n* var bernoulli = new Bernoulli( 0.2 );\n*\n* var v = bernoulli.pmf( 1.0 );\n* // returns 0.2\n*\n* v = bernoulli.pmf( 0.0 );\n* // returns 0.8\n*/\nsetReadOnly( Bernoulli.prototype, 'pmf', bernoulliPMF );\n\n/**\n* Evaluates the quantile function.\n*\n* @name quantile\n* @memberof Bernoulli.prototype\n* @type {Function}\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}\n*\n* @example\n* var bernoulli = new Bernoulli( 0.2 );\n*\n* var v = bernoulli.quantile( 0.9 );\n* // returns 1\n*/\nsetReadOnly( Bernoulli.prototype, 'quantile', bernoulliQuantile );\n\n\n// EXPORTS //\n\nmodule.exports = Bernoulli;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Bernoulli distribution constructor.\n*\n* @module @stdlib/stats-base-dists-bernoulli-ctor\n*\n* @example\n* var Bernoulli = require( '@stdlib/stats-base-dists-bernoulli-ctor' );\n*\n* var bernoulli = new Bernoulli( 0.3 );\n*\n* var y = bernoulli.cdf( 0.7 );\n* // returns 0.7\n*\n* var median = bernoulli.median;\n* // returns 0.0\n*/\n\n// MODULES //\n\nvar ctor = require( './ctor.js' );\n\n\n// EXPORTS //\n\nmodule.exports = ctor;\n"],"names":["defineProperty","require$$0","setReadOnly","require$$1","setReadOnlyAccessor","require$$2","isProbability","require$$3","isPrimitive","entropy","require$$4","kurtosis","require$$5","mean","require$$6","mode","require$$7","median","require$$8","skewness","require$$9","stdev","require$$10","variance","require$$11","cdf","require$$12","mgf","require$$13","pmf","require$$14","quantile","require$$15","format","require$$16","Bernoulli","p","this","arguments","length","TypeError","configurable","enumerable","get","set","value","prototype","x","t","lib"],"mappings":";;4pDAwBA,IAAIA,EAAiBC,EACjBC,EAAcC,EACdC,EAAsBC,EACtBC,EAAgBC,EAA2CC,YAC3DC,EAAUC,EACVC,EAAWC,EACXC,EAAOC,EACPC,EAAOC,EACPC,EAASC,EACTC,EAAWC,EACXC,EAAQC,EACRC,EAAWC,EACXC,EAAMC,EACNC,EAAMC,EACNC,EAAMC,EACNC,EAAWC,EACXC,EAASC,EAqEb,SAASC,IACR,IAAIC,EACJ,KAAOC,gBAAgBF,GACtB,OAA0B,IAArBG,UAAUC,OACP,IAAIJ,EAEL,IAAIA,EAAWG,UAAW,IAElC,GAAKA,UAAUC,QAEd,IAAMjC,EADN8B,EAAIE,UAAW,IAEd,MAAM,IAAIE,UAAWP,EAAQ,2EAA4EG,SAG1GA,EAAI,GAeL,OAbApC,EAAgBqC,KAAM,IAAK,CAC1BI,cAAgB,EAChBC,YAAc,EACdC,IAAO,WACN,OAAOP,GAERQ,IAAO,SAAcC,GACpB,IAAMvC,EAAeuC,GACpB,MAAM,IAAIL,UAAWP,EAAQ,qDAAsDY,IAEpFT,EAAIS,KAGCR,KAiBRjC,EAAqB+B,EAAUW,UAAW,WAAW,WACpD,OAAOrC,EAAS4B,KAAKD,MAiBtBhC,EAAqB+B,EAAUW,UAAW,YAAY,WACrD,OAAOnC,EAAU0B,KAAKD,MAiBvBhC,EAAqB+B,EAAUW,UAAW,QAAQ,WACjD,OAAOjC,EAAMwB,KAAKD,MAiBnBhC,EAAqB+B,EAAUW,UAAW,UAAU,WACnD,OAAO7B,EAAQoB,KAAKD,MAiBrBhC,EAAqB+B,EAAUW,UAAW,QAAQ,WACjD,OAAO/B,EAAMsB,KAAKD,MAiBnBhC,EAAqB+B,EAAUW,UAAW,YAAY,WACrD,OAAO3B,EAAUkB,KAAKD,MAiBvBhC,EAAqB+B,EAAUW,UAAW,SAAS,WAClD,OAAOzB,EAAOgB,KAAKD,MAiBpBhC,EAAqB+B,EAAUW,UAAW,YAAY,WACrD,OAAOvB,EAAUc,KAAKD,MAmBvBlC,EAAaiC,EAAUW,UAAW,OAzPlC,SAAuBC,GACtB,OAAOtB,EAAKsB,EAAGV,KAAKD,MA0QrBlC,EAAaiC,EAAUW,UAAW,OAhQlC,SAAuBE,GACtB,OAAOrB,EAAKqB,EAAGX,KAAKD,MAoRrBlC,EAAaiC,EAAUW,UAAW,OA1QlC,SAAuBC,GACtB,OAAOlB,EAAKkB,EAAGV,KAAKD,MA2RrBlC,EAAaiC,EAAUW,UAAW,YAjRlC,SAA4BV,GAC3B,OAAOL,EAAUK,EAAGC,KAAKD,MAqR1B,IC/TAa,ED+TiBd"}